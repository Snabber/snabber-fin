"use server";
import { NextRequest, NextResponse } from "next/server";
import mysql from "mysql2/promise";
import type { UserCategory } from "../../types/user_category";
import { Console } from "console";

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

const categoryIconMap: { [key: string]: string } = {
  // Dinheiro, renda e investimentos
  dinheiro: "üí∞", investimentos: "üìà", rendimentos: "üí∞", renda: "üí∞", salario: "üí∞", remuneracao: "üí∞",
  rendimento: "üíµ", "outras rendas": "üíµ", "pix recebido": "üì•", "pix enviado": "üì§", "cheque especial": "üè¶", juros: "üí∏",  "outros empr√©stimos": "üí≥", tarifas: "üí≥", impostos: "üßæ",
  // Casa e moradia
  casa: "üè†", moradia: "üè†", aluguel: "üè†", residencia: "üè†", habita√ß√£o: "üè†", "nova casa": "üè°", "contas residenciais": "üè†",
  // Transporte
  carro: "üöó", transporte: "üöó", gasolina: "‚õΩ", uber: "üöï", viagem: "‚úàÔ∏èüöó", estacionamento: "üÖøÔ∏è", "transportation": "üöó",
  // Alimenta√ß√£o
  restaurante: "üçî", comida: "üçî", lanchonete: "üçî", alimenta√ß√£o: "üçΩÔ∏è", refei√ß√£o: "üçΩÔ∏è", "restaurantes": "üçî", mercado: "üõí", food: "üçΩÔ∏è",
  // Lazer e entretenimento
  lazer: "üé≠", entretenimento: "üé¨", cinema: "üé•", festa: "üéä", astrix: "‚ú®", snabber: "üé≤",
  // Presentes e comemora√ß√µes
  presentes: "üéÅ", aniversario: "üéÇ", comemora√ß√£o: "üéä",
  // Fam√≠lia e filhos
  familia: "üë™", filhos: "üë∂", "dizimo/oferta": "üôè",
  // Sa√∫de e bem-estar
  saude: "ü©∫", psicologa: "üß†", academia: "üèãÔ∏è", "cuidados pessoais": "üíÖ", health: "ü©∫",
  // Educa√ß√£o e trabalho
  educa√ß√£o: "üéì", "despesas do trabalho": "üíº", services: "üõ†Ô∏è", "compra studio": "üé®", "compras": "üõçÔ∏è",
  // Casa e reformas
  reforma: "üî®", gas: "üî•", "empregados dom√©stic": "üßπ",
  // Outros
  outros: "üåÄ", ignorado: "‚ùå", "to be defined": "‚ùì",
  // Mapeamentos internacionais
  income: "üí∞", utilities: "üí°", entertainment: "üé≠", housing: "üè†"
};

// GET: Pega categorias de um usu√°rio
export async function GET(req: NextRequest) {
  const userId = req.nextUrl.searchParams.get("userId");


  if (!userId) return NextResponse.json({ error: "userId obrigat√≥rio" }, { status: 400 });

  const [rows] = await pool.query(
    `SELECT id, category, monthly_limit, icon_url
     FROM user_categories
     WHERE user_id = ?
     ORDER BY category`,
    [userId]
  );

  const categories: UserCategory[] = (rows as any[]).map((r) => ({
    id: r.id,
    category: r.category,
    monthlyLimit: r.monthly_limit,
    iconUrl: r.icon_url,
  }));

  return NextResponse.json({ categories });
}

// POST: Insere nova categoria
export async function POST(req: NextRequest) {
  const body = await req.json();
  const { userId, category, monthlyLimit, iconUrl } = body;

  if (!userId || !category) {
    return NextResponse.json(
      { error: "userId e category s√£o obrigat√≥rios" },
      { status: 400 }
    );
  }

  // Define iconUrl automaticamente se n√£o vier do usu√°rio
  const finalIconUrl = iconUrl ?? await getCategoryIcon(category) ?? '‚ùì';

  try {
    const [result] = await pool.query(
      `INSERT INTO user_categories (user_id, category, monthly_limit, icon_url)
       VALUES (?, ?, ?, ?)`,
      [userId, category, monthlyLimit ?? null, finalIconUrl]
    );

    const insertedId = (result as any).insertId;

    const newCategory = {
      id: insertedId,
      category,
      monthlyLimit: monthlyLimit ?? null,
      iconUrl: finalIconUrl,
    };

    return NextResponse.json({ category: newCategory });
  } catch (err: any) {
    console.error(err);
    return NextResponse.json({ error: err.message }, { status: 500 });
  }
}




// PUT: Atualiza categoria existente
export async function PUT(req: NextRequest) {
  const body = await req.json();
  const { id, category, monthlyLimit, iconUrl } = body;

  if (!id || !category) {
    return NextResponse.json(
      { error: "id e category s√£o obrigat√≥rios" },
      { status: 400 }
    );
  }

  try {
    await pool.query(
      `UPDATE user_categories
       SET category = ?, monthly_limit = ?, icon_url = ?
       WHERE id = ?`,
      [category, monthlyLimit ?? null, iconUrl ?? null, id]
    );

    const updatedCategory: UserCategory = {
      id,
      category,
      monthlyLimit: monthlyLimit ?? null,
      iconUrl: iconUrl ?? null,
    };

    return NextResponse.json({ category: updatedCategory });
  } catch (err: any) {
    console.error(err);
    return NextResponse.json({ error: err.message }, { status: 500 });
  }
}


// DELETE: Remove categoria se n√£o estiver em uso

export async function DELETE(req: NextRequest) {
  const categoryId = req.nextUrl.searchParams.get("id");
  const userId = req.nextUrl.searchParams.get("userId");
  if (!categoryId || !userId)
    return NextResponse.json(
      { error: "id da categoria e userId s√£o obrigat√≥rios" },
      { status: 400 }
    );

  try {
    // Pega o nome da categoria pelo id
    const [catRows] = await pool.query(
      `SELECT category FROM user_categories WHERE id = ? AND user_id = ?`,
      [categoryId, userId]
    );

    if ((catRows as any).length === 0) {
      return NextResponse.json(
        { error: "Categoria n√£o encontrada para este usu√°rio." },
        { status: 404 }
      );
    }

    const categoryName = (catRows as any)[0].category;

    // Verifica se existem transa√ß√µes usando essa categoria
    const [usageRows] = await pool.query(
      `SELECT COUNT(*) as count
       FROM money_transactions
       WHERE user_id = ? AND category = ?`,
      [userId, categoryName]
    );

    const usageCount = (usageRows as any)[0].count;

    if (usageCount > 0) {
      return NextResponse.json(
        { error: "N√£o √© poss√≠vel deletar. Categoria est√° em uso nas transa√ß√µes." },
        { status: 400 }
      );
    }

    // Remove a categoria
    await pool.query(
      `DELETE FROM user_categories WHERE id = ? AND user_id = ?`,
      [categoryId, userId]
    );

    return NextResponse.json({ message: "Categoria removida com sucesso." });
  } catch (err: any) {
    console.error(err);
    return NextResponse.json({ error: err.message }, { status: 500 });
  }
}



// Fun√ß√£o simples para remover acentos
function normalizeText(text: string): string {
  return text
    .toLowerCase()
    .normalize("NFD") // separa acentos
    .replace(/[\u0300-\u036f]/g, "") // remove acentos
    .replace(/\s+/g, "_"); // substitui espa√ßos por underscore
}

// Fun√ß√£o para obter √≠cone de categoria (case insensitive + singular/plural)
export async function getCategoryIcon(category: string): Promise<string> {
  const normalized = normalizeText(category);

  for (const key in categoryIconMap) {
    if (key.toLowerCase() === normalized.toLowerCase()) {
      console.log("Icon:", categoryIconMap[key]);
      console.log("Icon:", key);
      
      return categoryIconMap[key];
    }
  }

  return '‚ùì'; // √≠cone padr√£o caso n√£o encontre
}